[
  {
    "title": "Computer Science",
    "sub_topics": [
      {
        "title": "data structures",
        "levels": [
          { "text": "Doesn't know the difference between Array and LinkedList", "selected": false },
          { "text": "Able to explain and use Arrays, LinkedLists, Dictionaries, etc, in practical programming tasks", "selected": false },
          { "text": "Knows space and time tradeoffs of the basic data structures, Arrays vs LinkedLists, Able to explain how hashtables can be implemented and can handle collisions, Priority queues and ways to implement them etc.", "selected": false },
          { "text": "Knowledge of advanced data structures like B-trees, binomial and fibonacci heaps, AVL/Red Black trees, Splay Trees, Skip Lists, tries etc.", "selected": false }
        ]
      },
      {
        "title": "algorithms",
        "levels": [
          { "text": "Unable to find the average of numbers in an array (It’s hard to believe but I’ve interviewed such candidates)", "selected": false },
          { "text": "Basic sorting, searching and data structure traversal and retrieval algorithms", "selected": false },
          { "text": "Tree, Graph, simple greedy and divide and conquer algorithms, is able to understand the relevance of the levels of this matrix.", "selected": false },
          { "text": "Able to recognize and code dynamic programming solutions, good knowledge of graph algorithms, good knowledge of numerical computation algorithms, able to identify NP problems etc.", "selected": false }
        ]
      },
      {
        "title": "systems programming",
        "levels": [
          { "text": "Doesn’t know what a compiler, linker or interpreter is", "selected": false },
          { "text": "Some knowledge of virtual memory and paging.", "selected": false },
          { "text": "Understands kernel mode vs. user mode, multi-threading, synchronization primitives and how they’re implemented, able to read assembly code. Understands how networks work, understanding of network protocols and socket level programming.", "selected": false },
          { "text": "Understands the entire programming stack, hardware (CPU + Memory + Cache + Interrupts + microcode), binary code, assembly, static and dynamic linking, compilation, interpretation, JIT compilation, garbage collection, heap, stack, memory addressing...", "selected": false }
        ]
      }
    ]
  },
  {
    "title": "Software Engineering",
    "sub_topics": [
      {
        "title": "source code and version control",
        "levels": [
          { "text": "Folder backups by date", "selected": false },
          { "text": "VSS and beginning CVS/SVN user", "selected": false },
          { "text": "Proficient in using CVS and SVN features. Knows how to branch and merge, use patches setup repository properties etc.", "selected": false },
          { "text": "Knowledge of distributed VCS systems. Has tried out Bzr/Mercurial/Darcs/Git", "selected": false }
        ]
      },
      {
        "title": "build automation",
        "levels": [
          { "text": "Only knows how to build from IDE", "selected": false },
          { "text": "Knows how to build the system from the command line", "selected": false },
          { "text": "Can setup a script to build the basic system", "selected": false },
          { "text": "Can setup a script to build the system and also documentation, installers, generate release notes and tag the code in source control", "selected": false }
        ]
      },
      {
        "title": "automated testing",
        "levels": [
          { "text": "Thinks that all testing is the job of the tester", "selected": false },
          { "text": "Has written automated unit tests and comes up with good unit test cases for the code that is being written", "selected": false },
          { "text": "Has written code in TDD manner", "selected": false },
          { "text": "Understands and is able to setup automated functional, load/performance and UI tests", "selected": false }
        ]
      }
    ]
  }
]